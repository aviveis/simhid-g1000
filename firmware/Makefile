##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.7.1] date: [Mon May 03 00:40:13 JST 2021] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = simhid-g1000


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Core/Src/main.c \
Core/Src/stm32f4xx_it.c \
Core/Src/stm32f4xx_hal_msp.c \
USB_DEVICE/App/usb_device.c \
USB_DEVICE/App/usbd_desc.c \
USB_DEVICE/App/usbd_cdc_if.c \
USB_DEVICE/Target/usbd_conf.c \
src/appmain.c \
src/olog.c \
src/hrtimer.c \
src/switch.c \
src/switchgroup.c \
src/mcp23s18.c \
src/scanner.c \
src/hostprotocol.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pcd_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usb.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \
Core/Src/system_stm32f4xx.c \
Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_core.c \
Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c \
Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c \
Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c \
Middlewares/RTT/SEGGER_RTT.c \
Middlewares/RTT/SEGGER_RTT_printf.c

# ASM sources
ASM_SOURCES =  \
startup_stm32f411xe.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F411xE


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IUSB_DEVICE/App \
-IUSB_DEVICE/Target \
-ICore/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-IMiddlewares/ST/STM32_USB_Device_Library/Core/Inc \
-IMiddlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc \
-IMiddlewares/RTT \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IDrivers/CMSIS/Include \
-Isrc

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F411CEUx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# download & configure debugger
#######################################
flash: check_remote all
	@expect -c \
"spawn arm-none-eabi-gdb $(BUILD_DIR)/$(TARGET).elf;"\
"expect \"(gdb)\";"\
"send -- \"target remote $(DEBUGSERVER):3333\n\";"\
"expect \"(gdb)\";"\
"send -- \"load\n\";"\
"expect \"(gdb)\";"\
"send -- \"mon rtt stop \n\";"\
"expect \"(gdb)\";"\
"send -- \"eval \\\"mon rtt setup %p 512 SEGGER\\\\\\\\ RTT\\\", &_SEGGER_RTT\n\";"\
"expect \"(gdb)\";"\
"send -- \"mon rtt start \n\";"\
"expect \"(gdb)\";"\
"send -- \"mon reset run\n\";"\
"expect \"(gdb)\";"\
"send -- \"detach\n\";"\
"expect \"(gdb)\";"\
"send -- \"quit\n\";" || exit 1
	@echo

initrtt: check_remote all
	@expect -c \
"spawn arm-none-eabi-gdb $(BUILD_DIR)/$(TARGET).elf;"\
"expect \"(gdb)\";"\
"send -- \"target remote $(DEBUGSERVER):3333\n\";"\
"expect \"(gdb)\";"\
"send -- \"mon rtt stop \n\";"\
"expect \"(gdb)\";"\
"send -- \"eval \\\"mon rtt setup %p 512 SEGGER\\\\\\\\ RTT\\\", &_SEGGER_RTT\n\";"\
"expect \"(gdb)\";"\
"send -- \"mon rtt start \n\";"\
"expect \"(gdb)\";"\
"send -- \"mon reset run\n\";"\
"expect \"(gdb)\";"\
"send -- \"detach\n\";"\
"expect \"(gdb)\";"\
"send -- \"quit\n\";" || exit 1
	@echo
	
update_version:
	@OLD=`if [ -f build/.version ];then cat build/.version;fi`;\
	NEW=`tools/version`;\
	if ! [ "$$NEW" = "$$OLD" ];then\
	    (echo 'const char version_string[] = "'"$$NEW"'";';\
	     echo 'const char manufacturer_string[] = "Hiroshi Murayama <opiopan@gmail.com> / Firmware version: '"$$NEW"'";') >\
	        Src/version.c;\
	    echo "$$NEW" > build/.version;\
	    rm -f build/rcstick-f.bin;\
	    rm -f build/rcstick-f.elf;\
	fi

check_remote:
	@if [ "$(DEBUGSERVER)" = "" ];then \
	    echo >&2;\
	    echo ERROR: You need to specify a server address which openocd is running on, \
	         as DEBUGSERVER variable. >&2;\
	    echo >&2;\
	    exit 1;\
	fi

dfuflash:
	@DEVOPT=`dfu-util -l < /dev/null| awk -F'[, ]*' \
'           BEGIN {DEVNUM="";ALT=""} '\
'           /^Found DFU.*Internal Flash/{'\
'               DEVNUM=substr($$3, 2, length($$3) - 2);'\
'               for (i=4; i<=NF; i++){'\
'                   if (match($$i, "^alt=")){'\
'                       ALT=substr($$i, RSTART + RLENGTH)'\
'                   }'\
'               }'\
'           } '\
'           END{'\
'               if (DEVNUM != ""){'\
'                   printf("-d %s -a %s", DEVNUM, ALT)'\
'               }'\
'           }'`;\
	if [ "$$DEVOPT" != "" ];then\
	    dfu-util $$DEVOPT -s 0x8000000 -D $(BUILD_DIR)/$(TARGET).bin;\
	else\
	    echo No DFU capable USB device is found >&2;\
	    exit 1;\
	fi
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
